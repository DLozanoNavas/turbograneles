// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Italcol.TurboGraneles.Clients.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ReportSaeInput : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Boarding place code</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BoardingPlaceCode { get; set; }
#nullable restore
#else
        public string BoardingPlaceCode { get; set; }
#endif
        /// <summary>Container number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Container { get; set; }
#nullable restore
#else
        public string Container { get; set; }
#endif
        /// <summary>Driver ID number</summary>
        public double? DriverId { get; set; }
        /// <summary>Driver name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DriverName { get; set; }
#nullable restore
#else
        public string DriverName { get; set; }
#endif
        /// <summary>Cargo ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IdCarga { get; set; }
#nullable restore
#else
        public string IdCarga { get; set; }
#endif
        /// <summary>ISO code</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IsoCode { get; set; }
#nullable restore
#else
        public string IsoCode { get; set; }
#endif
        /// <summary>ZP entry format number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NumFormatoIngresoZP { get; set; }
#nullable restore
#else
        public string NumFormatoIngresoZP { get; set; }
#endif
        /// <summary>SAE number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sae { get; set; }
#nullable restore
#else
        public string Sae { get; set; }
#endif
        /// <summary>Seal numbers</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Seals { get; set; }
#nullable restore
#else
        public string Seals { get; set; }
#endif
        /// <summary>Sticker code</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sticker { get; set; }
#nullable restore
#else
        public string Sticker { get; set; }
#endif
        /// <summary>Truck company name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TruckCompany { get; set; }
#nullable restore
#else
        public string TruckCompany { get; set; }
#endif
        /// <summary>Truck license plate</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TruckLicence { get; set; }
#nullable restore
#else
        public string TruckLicence { get; set; }
#endif
        /// <summary>Vessel name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VesselName { get; set; }
#nullable restore
#else
        public string VesselName { get; set; }
#endif
        /// <summary>Visit number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VisitNbr { get; set; }
#nullable restore
#else
        public string VisitNbr { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Italcol.TurboGraneles.Clients.Models.ReportSaeInput"/> and sets the default values.
        /// </summary>
        public ReportSaeInput()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Italcol.TurboGraneles.Clients.Models.ReportSaeInput"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Italcol.TurboGraneles.Clients.Models.ReportSaeInput CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Italcol.TurboGraneles.Clients.Models.ReportSaeInput();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "boardingPlaceCode", n => { BoardingPlaceCode = n.GetStringValue(); } },
                { "container", n => { Container = n.GetStringValue(); } },
                { "driverId", n => { DriverId = n.GetDoubleValue(); } },
                { "driverName", n => { DriverName = n.GetStringValue(); } },
                { "idCarga", n => { IdCarga = n.GetStringValue(); } },
                { "isoCode", n => { IsoCode = n.GetStringValue(); } },
                { "numFormatoIngresoZP", n => { NumFormatoIngresoZP = n.GetStringValue(); } },
                { "sae", n => { Sae = n.GetStringValue(); } },
                { "seals", n => { Seals = n.GetStringValue(); } },
                { "sticker", n => { Sticker = n.GetStringValue(); } },
                { "truckCompany", n => { TruckCompany = n.GetStringValue(); } },
                { "truckLicence", n => { TruckLicence = n.GetStringValue(); } },
                { "vesselName", n => { VesselName = n.GetStringValue(); } },
                { "visitNbr", n => { VisitNbr = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("boardingPlaceCode", BoardingPlaceCode);
            writer.WriteStringValue("container", Container);
            writer.WriteDoubleValue("driverId", DriverId);
            writer.WriteStringValue("driverName", DriverName);
            writer.WriteStringValue("idCarga", IdCarga);
            writer.WriteStringValue("isoCode", IsoCode);
            writer.WriteStringValue("numFormatoIngresoZP", NumFormatoIngresoZP);
            writer.WriteStringValue("sae", Sae);
            writer.WriteStringValue("seals", Seals);
            writer.WriteStringValue("sticker", Sticker);
            writer.WriteStringValue("truckCompany", TruckCompany);
            writer.WriteStringValue("truckLicence", TruckLicence);
            writer.WriteStringValue("vesselName", VesselName);
            writer.WriteStringValue("visitNbr", VisitNbr);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

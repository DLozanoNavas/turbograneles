// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Italcol.TurboGraneles.Clients.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ResponseHeaderDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Identificador de página activa en caso de paginación</summary>
        public double? ActiveRecord { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Indicador de página final</summary>
        public bool? FinalMessage { get; set; }
        /// <summary>Mensaje del proceso</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProcessMessage { get; set; }
#nullable restore
#else
        public string ProcessMessage { get; set; }
#endif
        /// <summary>Identificador de la petición del sistema origen</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RequestID { get; set; }
#nullable restore
#else
        public string RequestID { get; set; }
#endif
        /// <summary>Código de la respuesta del servicio</summary>
        public double? ResponseCode { get; set; }
        /// <summary>Mensaje de respuesta dado por el servicio</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResponseMessage { get; set; }
#nullable restore
#else
        public string ResponseMessage { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Italcol.TurboGraneles.Clients.Models.ResponseHeaderDto"/> and sets the default values.
        /// </summary>
        public ResponseHeaderDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Italcol.TurboGraneles.Clients.Models.ResponseHeaderDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Italcol.TurboGraneles.Clients.Models.ResponseHeaderDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Italcol.TurboGraneles.Clients.Models.ResponseHeaderDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "activeRecord", n => { ActiveRecord = n.GetDoubleValue(); } },
                { "finalMessage", n => { FinalMessage = n.GetBoolValue(); } },
                { "processMessage", n => { ProcessMessage = n.GetStringValue(); } },
                { "requestID", n => { RequestID = n.GetStringValue(); } },
                { "responseCode", n => { ResponseCode = n.GetDoubleValue(); } },
                { "responseMessage", n => { ResponseMessage = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("activeRecord", ActiveRecord);
            writer.WriteBoolValue("finalMessage", FinalMessage);
            writer.WriteStringValue("processMessage", ProcessMessage);
            writer.WriteStringValue("requestID", RequestID);
            writer.WriteDoubleValue("responseCode", ResponseCode);
            writer.WriteStringValue("responseMessage", ResponseMessage);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

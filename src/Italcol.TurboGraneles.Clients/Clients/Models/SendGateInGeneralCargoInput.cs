// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Italcol.TurboGraneles.Clients.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SendGateInGeneralCargoInput : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Boarding place code</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BoardingPlaceCode { get; set; }
#nullable restore
#else
        public string BoardingPlaceCode { get; set; }
#endif
        /// <summary>Cargo ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CargoId { get; set; }
#nullable restore
#else
        public string CargoId { get; set; }
#endif
        /// <summary>Driver ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DriverId { get; set; }
#nullable restore
#else
        public string DriverId { get; set; }
#endif
        /// <summary>Driver name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DriverName { get; set; }
#nullable restore
#else
        public string DriverName { get; set; }
#endif
        /// <summary>SAE number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sae { get; set; }
#nullable restore
#else
        public string Sae { get; set; }
#endif
        /// <summary>Service number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServiceNbr { get; set; }
#nullable restore
#else
        public string ServiceNbr { get; set; }
#endif
        /// <summary>Shipping line</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ShippingLine { get; set; }
#nullable restore
#else
        public string ShippingLine { get; set; }
#endif
        /// <summary>Truck company</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TruckCompany { get; set; }
#nullable restore
#else
        public string TruckCompany { get; set; }
#endif
        /// <summary>Truck license plate</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TruckLicense { get; set; }
#nullable restore
#else
        public string TruckLicense { get; set; }
#endif
        /// <summary>Vessel name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Vessel { get; set; }
#nullable restore
#else
        public string Vessel { get; set; }
#endif
        /// <summary>Visit number</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VisitNbr { get; set; }
#nullable restore
#else
        public string VisitNbr { get; set; }
#endif
        /// <summary>Weight in tons</summary>
        public double? Weight { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Italcol.TurboGraneles.Clients.Models.SendGateInGeneralCargoInput"/> and sets the default values.
        /// </summary>
        public SendGateInGeneralCargoInput()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Italcol.TurboGraneles.Clients.Models.SendGateInGeneralCargoInput"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Italcol.TurboGraneles.Clients.Models.SendGateInGeneralCargoInput CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Italcol.TurboGraneles.Clients.Models.SendGateInGeneralCargoInput();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "boardingPlaceCode", n => { BoardingPlaceCode = n.GetStringValue(); } },
                { "cargoId", n => { CargoId = n.GetStringValue(); } },
                { "driverId", n => { DriverId = n.GetStringValue(); } },
                { "driverName", n => { DriverName = n.GetStringValue(); } },
                { "sae", n => { Sae = n.GetStringValue(); } },
                { "serviceNbr", n => { ServiceNbr = n.GetStringValue(); } },
                { "shippingLine", n => { ShippingLine = n.GetStringValue(); } },
                { "truckCompany", n => { TruckCompany = n.GetStringValue(); } },
                { "truckLicense", n => { TruckLicense = n.GetStringValue(); } },
                { "vessel", n => { Vessel = n.GetStringValue(); } },
                { "visitNbr", n => { VisitNbr = n.GetStringValue(); } },
                { "weight", n => { Weight = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("boardingPlaceCode", BoardingPlaceCode);
            writer.WriteStringValue("cargoId", CargoId);
            writer.WriteStringValue("driverId", DriverId);
            writer.WriteStringValue("driverName", DriverName);
            writer.WriteStringValue("sae", Sae);
            writer.WriteStringValue("serviceNbr", ServiceNbr);
            writer.WriteStringValue("shippingLine", ShippingLine);
            writer.WriteStringValue("truckCompany", TruckCompany);
            writer.WriteStringValue("truckLicense", TruckLicense);
            writer.WriteStringValue("vessel", Vessel);
            writer.WriteStringValue("visitNbr", VisitNbr);
            writer.WriteDoubleValue("weight", Weight);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
